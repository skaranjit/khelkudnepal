<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>System Management - Khelkud Nepal</title>
  <link rel="stylesheet" href="/css/admin.css">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
  <style>
    /* System Management page specific styles */
    .card {
      transition: all 0.3s ease;
      border: 1px solid rgba(0, 0, 0, 0.08);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
      margin-bottom: 1.8rem;
      border-radius: 8px;
      overflow: hidden;
    }
    
    .card:hover {
      box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
    }
    
    .card-header {
      background-color: #f8f9fa;
      border-bottom: 1px solid rgba(0, 0, 0, 0.08);
      padding: 1rem 1.5rem;
      font-weight: 500;
    }
    
    .card-body {
      padding: 1.5rem;
    }
    
    .progress {
      height: 25px;
      border-radius: 6px;
      box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);
    }
    
    .progress-bar {
      text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.3);
      font-weight: 600;
      transition: width 1s ease;
      font-size: 0.85rem;
    }
    
    .badge.bg-success, .progress-bar.bg-success {
      background-color: #28a745 !important;
    }
    
    .badge.bg-primary, .progress-bar.bg-primary {
      background-color: #007bff !important;
    }
    
    .badge.bg-warning, .progress-bar.bg-warning {
      background-color: #ffc107 !important;
      color: #212529;
    }
    
    .badge.bg-info, .progress-bar.bg-info {
      background-color: #17a2b8 !important;
    }
    
    .badge.bg-secondary, .progress-bar.bg-secondary {
      background-color: #6c757d !important;
    }
    
    .btn {
      border-radius: 6px;
      font-weight: 500;
      padding: 0.5rem 1rem;
      transition: all 0.15s ease-in-out;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }
    
    .btn:hover {
      transform: translateY(-1px);
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);
    }
    
    .btn-primary {
      background-color: #007bff;
      border-color: #007bff;
    }
    
    .btn-warning {
      background-color: #ffc107;
      border-color: #ffc107;
      color: #212529;
    }
    
    .btn-danger {
      background-color: #dc3545;
      border-color: #dc3545;
    }
    
    .btn-outline-primary {
      color: #007bff;
      border-color: #007bff;
    }
    
    .btn-outline-danger {
      color: #dc3545;
      border-color: #dc3545;
    }
    
    .btn-sm {
      padding: 0.25rem 0.5rem;
      font-size: 0.875rem;
    }
    
    .list-group-item {
      border: 1px solid rgba(0, 0, 0, 0.08);
      padding: 0.75rem 1.25rem;
      transition: all 0.2s ease;
    }
    
    .list-group-item:hover {
      background-color: rgba(0, 123, 255, 0.05);
    }
    
    .list-group-item.active {
      background-color: #007bff;
      border-color: #007bff;
      font-weight: 500;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    
    .table-responsive {
      min-height: 200px;
      border-radius: 6px;
      overflow: hidden;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
    }
    
    .table {
      margin-bottom: 0;
    }
    
    .table th {
      background-color: #f8f9fa;
      border-bottom: 1px solid rgba(0, 0, 0, 0.08);
      font-weight: 600;
    }
    
    #standings-table-body tr:hover {
      background-color: rgba(0, 123, 255, 0.05);
    }
    
    /* Status indicators */
    .text-success {
      color: #28a745 !important;
      font-weight: 600;
    }
    
    .text-danger {
      color: #dc3545 !important;
      font-weight: 600;
    }

    /* Enhanced status indicators with icons */
    #redis-status.text-success::before {
      content: '●';
      display: inline-block;
      margin-right: 5px;
      animation: pulse 2s infinite;
    }
    
    #redis-status.text-danger::before {
      content: '○';
      display: inline-block;
      margin-right: 5px;
    }
    
    @keyframes pulse {
      0% { opacity: 0.5; }
      50% { opacity: 1; }
      100% { opacity: 0.5; }
    }
    
    /* Toast notifications */
    .toast-container {
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 1050;
    }
    
    .toast {
      min-width: 300px;
      box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
      border: none;
      backdrop-filter: blur(10px);
      border-radius: 8px;
    }
    
    .toast.bg-success {
      background-color: rgba(40, 167, 69, 0.9) !important;
    }
    
    .toast.bg-danger {
      background-color: rgba(220, 53, 69, 0.9) !important;
    }
    
    .toast-header {
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
      background-color: transparent;
      padding: 0.75rem 1rem;
      color: #fff;
    }
    
    .toast-body {
      padding: 1rem;
      color: #fff;
      font-weight: 500;
    }
    
    .spinner-border {
      width: 1rem;
      height: 1rem;
      vertical-align: -0.125em;
    }
    
    /* Loading animation */
    .loading-placeholder::after {
      content: "";
      display: inline-block;
      width: 1em;
      height: 1em;
      vertical-align: middle;
      margin-left: 0.5em;
      border: 0.2em solid rgba(0, 123, 255, 0.25);
      border-right-color: #007bff;
      border-radius: 50%;
      animation: spinner-border 0.75s linear infinite;
    }
    
    /* Count indicators */
    .count-badge {
      display: inline-block;
      padding: 0.35em 0.65em;
      font-size: 75%;
      font-weight: 700;
      line-height: 1;
      text-align: center;
      white-space: nowrap;
      vertical-align: baseline;
      border-radius: 10rem;
      background-color: #f8f9fa;
      color: #212529;
      transition: all 0.3s ease;
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    }
    
    /* Form elements */
    .form-select {
      border-radius: 6px;
      padding: 0.5rem 1rem;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
      border: 1px solid rgba(0, 0, 0, 0.15);
    }
    
    .form-select:focus {
      box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
      border-color: #86b7fe;
    }
    
    /* Alert styling */
    .alert {
      border-radius: 6px;
      border: none;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }
    
    .alert-danger {
      background-color: rgba(220, 53, 69, 0.1);
      color: #dc3545;
      border-left: 4px solid #dc3545;
    }
    
    /* Modal styling */
    .modal-content {
      border-radius: 8px;
      border: none;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
    }
    
    .modal-header {
      border-bottom: 1px solid rgba(0, 0, 0, 0.1);
      padding: 1.25rem 1.5rem;
    }
    
    .modal-footer {
      border-top: 1px solid rgba(0, 0, 0, 0.1);
      padding: 1.25rem 1.5rem;
    }
    
    /* Responsive adjustments */
    @media (max-width: 768px) {
      .col-md-2 {
        width: 50%;
        float: left;
      }
      
      .toast-container {
        right: 10px;
        left: 10px;
        width: auto;
      }
      
      .toast {
        min-width: auto;
      }
      
      .card-body {
        padding: 1.25rem;
      }
      
      .btn {
        width: 100%;
        margin-bottom: 0.5rem;
      }
      
      .table-responsive {
        overflow-x: auto;
      }
    }
  </style>
</head>
<body>
  <!-- Toast container for notifications -->
  <div class="toast-container position-fixed top-0 end-0 p-3">
    <div id="toast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="toast-header">
        <strong class="me-auto" id="toast-title">Notification</strong>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
      <div class="toast-body" id="toast-message">
        Hello, world! This is a toast message.
      </div>
    </div>
  </div>

  <div class="container-fluid">
    <div class="row">
      <!-- Sidebar -->
      <%- include('./partials/sidebar', { active: 'system' }) %>
      
      <!-- Main content -->
      <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4 py-4">
        <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
          <h1 class="h2">System Management</h1>
          <div class="btn-toolbar mb-2 mb-md-0">
            <button type="button" class="btn btn-sm btn-outline-secondary" id="refresh-cache-status">
              <i class="bi bi-arrow-repeat"></i> Refresh Status
            </button>
          </div>
        </div>

        <!-- Cache Status Section -->
        <div class="row mb-4">
          <div class="col-md-12">
            <h5 class="border-bottom pb-2 mb-3">Redis Cache Status</h5>
          </div>
          <div class="col-md-3 mb-3">
            <div class="card text-white bg-primary">
              <div class="card-body">
                <h5 class="card-title">Redis Status</h5>
                <h2 class="card-text" id="redis-status">Loading...</h2>
                <small class="text-white-50">Connection status</small>
              </div>
            </div>
          </div>
          <div class="col-md-3 mb-3">
            <div class="card text-white bg-success">
              <div class="card-body">
                <h5 class="card-title">Total Cached Items</h5>
                <h2 class="card-text" id="total-cache-count">Loading...</h2>
                <small class="text-white-50">Items in Redis</small>
              </div>
            </div>
          </div>
          <div class="col-md-3 mb-3">
            <div class="card text-white bg-info">
              <div class="card-body">
                <h5 class="card-title">News Cache</h5>
                <h2 class="card-text" id="news-cache-count">Loading...</h2>
                <small class="text-white-50">Cached articles</small>
              </div>
            </div>
          </div>
          <div class="col-md-3 mb-3">
            <div class="card text-white bg-warning">
              <div class="card-body">
                <h5 class="card-title">Leagues Cache</h5>
                <h2 class="card-text" id="leagues-cache-count">Loading...</h2>
                <small class="text-white-50">Cached leagues</small>
              </div>
            </div>
          </div>
          <div class="col-md-3 mb-3">
            <div class="card text-white bg-danger">
              <div class="card-body">
                <h5 class="card-title">Matches Cache</h5>
                <h2 class="card-text" id="match-keys-count">Loading...</h2>
                <small class="text-white-50">Cached matches</small>
              </div>
            </div>
          </div>
        </div>

        <!-- Cache Management Section -->
        <div class="row mb-4">
          <div class="col-md-12">
            <h5 class="border-bottom pb-2 mb-3">Cache Management</h5>
          </div>
          <div class="col-md-6 mb-3">
            <div class="card">
              <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Clear Specific Cache</h5>
              </div>
              <div class="card-body">
                <p class="card-text">Clear a specific type of cache while keeping others intact.</p>
                <div class="row">
                  <div class="col-md-4 mb-2">
                    <button class="btn btn-warning w-100" id="clear-news-cache">
                      <i class="bi bi-x-circle"></i> News Cache
                    </button>
                  </div>
                  <div class="col-md-4 mb-2">
                    <button class="btn btn-warning w-100" id="clear-leagues-cache">
                      <i class="bi bi-x-circle"></i> Leagues Cache
                    </button>
                  </div>
                  <div class="col-md-4 mb-2">
                    <button class="btn btn-warning w-100" id="clear-users-cache">
                      <i class="bi bi-x-circle"></i> Users Cache
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="col-md-6 mb-3">
            <div class="card">
              <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Clear All Cache</h5>
              </div>
              <div class="card-body">
                <p class="card-text">Clear all Redis cache. This will flush everything stored in Redis.</p>
                <button class="btn btn-danger" id="clear-all-cache">
                  <i class="bi bi-exclamation-triangle"></i> Clear All Cache
                </button>
              </div>
            </div>
          </div>
        </div>

        <!-- Database Status Section -->
        <div class="row mb-4">
          <div class="col-md-12">
            <h5 class="border-bottom pb-2 mb-3">Database Status</h5>
          </div>
          <div class="col-md-4 mb-3">
            <div class="card text-white bg-secondary">
              <div class="card-body">
                <h5 class="card-title">News Count</h5>
                <h2 class="card-text" id="news-count">Loading...</h2>
                <small class="text-white-50">Articles in database</small>
              </div>
            </div>
          </div>
          <div class="col-md-4 mb-3">
            <div class="card text-white bg-secondary">
              <div class="card-body">
                <h5 class="card-title">Leagues Count</h5>
                <h2 class="card-text" id="leagues-count">Loading...</h2>
                <small class="text-white-50">Leagues in database</small>
              </div>
            </div>
          </div>
          <div class="col-md-4 mb-3">
            <div class="card text-white bg-secondary">
              <div class="card-body">
                <h5 class="card-title">Users Count</h5>
                <h2 class="card-text" id="users-count">Loading...</h2>
                <small class="text-white-50">Users in database</small>
              </div>
            </div>
          </div>
        </div>

        <!-- News by Category Section -->
        <div class="row mb-4">
          <div class="col-md-12">
            <h5 class="border-bottom pb-2 mb-3">Articles by Category</h5>
          </div>
          <div class="col-md-12 mb-3">
            <div class="card">
              <div class="card-body">
                <div class="row mb-3" id="news-by-category-container">
                  <div class="col-md-2">
                    <div class="mb-3 text-center">
                      <strong>Cricket</strong>
                      <h3 id="cricket-count" class="mb-0">Loading...</h3>
                    </div>
                  </div>
                  <div class="col-md-2">
                    <div class="mb-3 text-center">
                      <strong>Football</strong>
                      <h3 id="football-count" class="mb-0">Loading...</h3>
                    </div>
                  </div>
                  <div class="col-md-2">
                    <div class="mb-3 text-center">
                      <strong>Basketball</strong>
                      <h3 id="basketball-count" class="mb-0">Loading...</h3>
                    </div>
                  </div>
                  <div class="col-md-2">
                    <div class="mb-3 text-center">
                      <strong>Volleyball</strong>
                      <h3 id="volleyball-count" class="mb-0">Loading...</h3>
                    </div>
                  </div>
                  <div class="col-md-2">
                    <div class="mb-3 text-center">
                      <strong>Other Sports</strong>
                      <h3 id="other-sports-count" class="mb-0">Loading...</h3>
                    </div>
                  </div>
                </div>
                
                <!-- Category Distribution Bar -->
                <div class="mt-3">
                  <h6 class="mb-2">Category Distribution</h6>
                  <div class="progress">
                    <div id="cricket-bar" class="progress-bar bg-success" role="progressbar" style="width: 0%" 
                        data-bs-toggle="tooltip" data-bs-placement="top" title="Cricket">0%</div>
                    <div id="football-bar" class="progress-bar bg-primary" role="progressbar" style="width: 0%" 
                        data-bs-toggle="tooltip" data-bs-placement="top" title="Football">0%</div>
                    <div id="basketball-bar" class="progress-bar bg-warning" role="progressbar" style="width: 0%" 
                        data-bs-toggle="tooltip" data-bs-placement="top" title="Basketball">0%</div>
                    <div id="volleyball-bar" class="progress-bar bg-info" role="progressbar" style="width: 0%" 
                        data-bs-toggle="tooltip" data-bs-placement="top" title="Volleyball">0%</div>
                    <div id="othersports-bar" class="progress-bar bg-secondary" role="progressbar" style="width: 0%" 
                        data-bs-toggle="tooltip" data-bs-placement="top" title="Other Sports">0%</div>
                  </div>
                  <div class="mt-2 d-flex justify-content-between">
                    <small><span class="badge bg-success">Cricket</span></small>
                    <small><span class="badge bg-primary">Football</span></small>
                    <small><span class="badge bg-warning">Basketball</span></small>
                    <small><span class="badge bg-info">Volleyball</span></small>
                    <small><span class="badge bg-secondary">Other Sports</span></small>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- League Standings Section -->
        <div class="row mb-4">
          <div class="col-md-12">
            <div class="card">
              <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">League Standings</h5>
                <button class="btn btn-sm btn-outline-primary" id="refresh-league-standings">
                  <i class="bi bi-arrow-repeat"></i> Refresh Standings
                </button>
              </div>
              <div class="card-body">
                <div class="row mb-3">
                  <div class="col-md-12">
                    <select class="form-select" id="league-category-select">
                      <option value="Cricket">Cricket</option>
                      <option value="Football">Football</option>
                      <option value="Basketball">Basketball</option>
                      <option value="Volleyball">Volleyball</option>
                      <option value="Other">Other</option>
                    </select>
                  </div>
                </div>
                
                <div class="row mt-2">
                  <div class="col-md-4">
                    <div class="list-group" id="leagues-list">
                      <a href="#" class="list-group-item list-group-item-action active" aria-current="true">
                        Select a category to see leagues
                      </a>
                    </div>
                  </div>
                  <div class="col-md-8">
                    <div class="table-responsive">
                      <table class="table table-striped table-hover">
                        <thead>
                          <tr>
                            <th scope="col">#</th>
                            <th scope="col">Team</th>
                            <th scope="col">Played</th>
                            <th scope="col">Won</th>
                            <th scope="col">Draw</th>
                            <th scope="col">Lost</th>
                            <th scope="col">Points</th>
                          </tr>
                        </thead>
                        <tbody id="standings-table-body">
                          <tr>
                            <td colspan="7" class="text-center">Select a league to view standings</td>
                          </tr>
                        </tbody>
                      </table>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Data Refresh Section -->
        <div class="row mb-4">
          <div class="col-md-12">
            <h5 class="border-bottom pb-2 mb-3">Data Refresh Operations</h5>
          </div>
          <div class="col-md-6 mb-3">
            <div class="card">
              <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Refresh News Cache</h5>
              </div>
              <div class="card-body">
                <p class="card-text">Reload news data from the database into the cache.</p>
                <button class="btn btn-primary" id="fetch-news-btn">
                  <i class="bi bi-arrow-repeat"></i> Refresh News Cache
                </button>
                <div class="mt-2 d-none" id="fetch-news-progress">
                  <div class="d-flex align-items-center">
                    <div class="spinner-border spinner-border-sm me-2" role="status">
                      <span class="visually-hidden">Refreshing...</span>
                    </div>
                    <span>Refreshing news cache...</span>
                  </div>
                </div>
                <div class="mt-2 text-success d-none" id="fetch-news-success">
                  <i class="bi bi-check-circle"></i> <span id="fetch-news-result"></span>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Database Management Section -->
        <div class="row mb-4">
          <div class="col-md-12">
            <h5 class="border-bottom pb-2 mb-3">Database Management</h5>
          </div>
          <div class="col-md-12 mb-3">
            <div class="card border-danger">
              <div class="card-header bg-danger text-white">
                <h5 class="mb-0">Danger Zone</h5>
              </div>
              <div class="card-body">
                <div class="alert alert-danger">
                  <i class="bi bi-exclamation-triangle-fill me-2"></i>
                  <strong>Warning!</strong> The following operations are destructive and cannot be undone. Use with extreme caution.
                </div>
                <div class="row">
                  <div class="col-md-6 mb-3">
                    <div class="card h-100">
                      <div class="card-header">
                        <h5 class="mb-0">Clear Specific Collection</h5>
                      </div>
                      <div class="card-body">
                        <p class="card-text">Delete all documents from a specific collection.</p>
                        <button class="btn btn-outline-danger me-2 mb-2" id="clear-news-db">
                          <i class="bi bi-trash"></i> Clear News Collection
                        </button>
                        <button class="btn btn-outline-danger mb-2" id="clear-leagues-db">
                          <i class="bi bi-trash"></i> Clear Leagues Collection
                        </button>
                      </div>
                    </div>
                  </div>
                  <div class="col-md-6 mb-3">
                    <div class="card h-100">
                      <div class="card-header">
                        <h5 class="mb-0">Clear All Data</h5>
                      </div>
                      <div class="card-body">
                        <p class="card-text">Delete all content data from the database. User accounts will be preserved.</p>
                        <button class="btn btn-danger" id="clear-all-db" data-bs-toggle="modal" data-bs-target="#confirmDeleteModal">
                          <i class="bi bi-exclamation-octagon-fill"></i> Clear All Data
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Add Matches Cache card to the appropriate row -->
        <div class="row mb-4">
          <div class="col-md-6">
            <div class="card h-100">
              <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Matches Cache</h5>
                <span id="matches-cache-source" class="badge bg-secondary">Loading...</span>
              </div>
              <div class="card-body">
                <div class="mb-3">
                  <h6>Matches by Status:</h6>
                  <div class="progress mb-3" style="height: 25px;">
                    <div id="live-matches-bar" class="progress-bar bg-danger" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">Live: 0</div>
                    <div id="upcoming-matches-bar" class="progress-bar bg-primary" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">Upcoming: 0</div>
                    <div id="completed-matches-bar" class="progress-bar bg-success" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">Completed: 0</div>
                  </div>
                  
                  <h6>Matches by Category:</h6>
                  <div class="d-flex flex-wrap gap-2 mb-3">
                    <span class="badge bg-primary">Cricket: <span id="cricket-matches-count">-</span></span>
                    <span class="badge bg-success">Football: <span id="football-matches-count">-</span></span>
                    <span class="badge bg-info">Basketball: <span id="basketball-matches-count">-</span></span>
                    <span class="badge bg-warning">Volleyball: <span id="volleyball-matches-count">-</span></span>
                    <span class="badge bg-secondary">Other Sports: <span id="othersports-matches-count">-</span></span>
                  </div>
                </div>
                
                <div class="d-flex flex-wrap gap-2">
                  <button id="refresh-matches-btn" class="btn btn-sm btn-primary">
                    <i class="bi bi-arrow-repeat"></i> Refresh Matches Cache
                  </button>
                  <div id="refresh-matches-progress" class="d-none">
                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                    Refreshing...
                  </div>
                  <div id="refresh-matches-success" class="d-none">
                    <i class="bi bi-check-circle-fill text-success me-2"></i>
                    <span id="refresh-matches-result"></span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
    </div>
  </div>

  <!-- Confirmation Modal -->
  <div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-labelledby="confirmDeleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header bg-danger text-white">
          <h5 class="modal-title" id="confirmDeleteModalLabel">Confirm Delete</h5>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <p>Are you absolutely sure you want to delete all content data? This action cannot be undone.</p>
          <div class="form-check mb-3">
            <input class="form-check-input" type="checkbox" id="confirmDeleteCheck">
            <label class="form-check-label" for="confirmDeleteCheck">
              I understand this will permanently delete all content data
            </label>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-danger" id="confirm-delete-btn" disabled>Delete All Data</button>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // DOM elements
      const redisStatus = document.getElementById('redis-status');
      const totalCacheCount = document.getElementById('total-cache-count');
      const newsCacheCount = document.getElementById('news-cache-count');
      const leaguesCacheCount = document.getElementById('leagues-cache-count');
      const usersCacheCount = document.getElementById('users-cache-count');
      const newsCount = document.getElementById('news-count');
      const leaguesCount = document.getElementById('leagues-count');
      const usersCount = document.getElementById('users-count');
      const cricketCount = document.getElementById('cricket-count');
      const footballCount = document.getElementById('football-count');
      const basketballCount = document.getElementById('basketball-count');
      const volleyballCount = document.getElementById('volleyball-count');
      const otherSportsCount = document.getElementById('other-sports-count');
      const cricketBar = document.getElementById('cricket-bar');
      const footballBar = document.getElementById('football-bar');
      const basketballBar = document.getElementById('basketball-bar');
      const volleyballBar = document.getElementById('volleyball-bar');
      const othersportsBar = document.getElementById('othersports-bar');
      const leagueCategorySelect = document.getElementById('league-category-select');
      const leaguesList = document.getElementById('leagues-list');
      const standingsTableBody = document.getElementById('standings-table-body');
      const refreshLeagueStandingsBtn = document.getElementById('refresh-league-standings');
      const clearNewsCacheBtn = document.getElementById('clear-news-cache');
      const clearLeaguesCacheBtn = document.getElementById('clear-leagues-cache');
      const clearUsersCacheBtn = document.getElementById('clear-users-cache');
      const clearAllCacheBtn = document.getElementById('clear-all-cache');
      const clearNewsDbBtn = document.getElementById('clear-news-db');
      const clearLeaguesDbBtn = document.getElementById('clear-leagues-db');
      const confirmDeleteCheck = document.getElementById('confirmDeleteCheck');
      const confirmDeleteBtn = document.getElementById('confirm-delete-btn');
      const fetchNewsBtn = document.getElementById('fetch-news-btn');
      const fetchNewsProgress = document.getElementById('fetch-news-progress');
      const fetchNewsSuccess = document.getElementById('fetch-news-success');
      const fetchNewsResult = document.getElementById('fetch-news-result');
      const newsKeysCount = document.getElementById('news-keys-count');
      const leagueKeysCount = document.getElementById('league-keys-count');
      const userKeysCount = document.getElementById('user-keys-count');
      const matchKeysCount = document.getElementById('match-keys-count');
      const totalKeysCount = document.getElementById('total-keys-count');
      const cacheInfoContainer = document.getElementById('cache-info-container');
      
      // Match status elements
      const liveMatchesBar = document.getElementById('live-matches-bar');
      const upcomingMatchesBar = document.getElementById('upcoming-matches-bar');
      const completedMatchesBar = document.getElementById('completed-matches-bar');
      
      // Match category counts
      const cricketMatchesCount = document.getElementById('cricket-matches-count');
      const footballMatchesCount = document.getElementById('football-matches-count');
      const basketballMatchesCount = document.getElementById('basketball-matches-count');
      const volleyballMatchesCount = document.getElementById('volleyball-matches-count');
      const othersportsMatchesCount = document.getElementById('othersports-matches-count');
      
      // Match cache elements
      const refreshMatchesBtn = document.getElementById('refresh-matches-btn');
      const refreshMatchesProgress = document.getElementById('refresh-matches-progress');
      const refreshMatchesSuccess = document.getElementById('refresh-matches-success');
      const refreshMatchesResult = document.getElementById('refresh-matches-result');
      const matchesCacheSource = document.getElementById('matches-cache-source');
      
      const toast = new bootstrap.Toast(document.getElementById('toast'));
      
      // Store leagues data globally
      let leaguesData = {};
      
      // Set loading state for all counters
      [totalCacheCount, newsCacheCount, leaguesCacheCount, usersCacheCount, 
       newsCount, leaguesCount, usersCount, cricketCount, footballCount, 
       basketballCount, volleyballCount, otherSportsCount].forEach(element => {
        if (element) element.classList.add('loading-placeholder');
      });
      
      // Show toast message
      function showToast(title, message, isError = false) {
        // Get the toast elements
        const toastElement = document.getElementById('toast');
        const toastTitle = document.getElementById('toast-title');
        const toastMessage = document.getElementById('toast-message');
        
        // Remove any existing classes
        toastElement.classList.remove('bg-success', 'bg-danger');
        
        // Set the content
        toastTitle.textContent = title;
        toastMessage.textContent = message;
        
        // Add the appropriate class based on the type
        if (isError) {
          toastElement.classList.add('bg-danger');
          toastTitle.innerHTML = '<i class="bi bi-exclamation-triangle-fill me-2"></i>' + title;
        } else {
          toastElement.classList.add('bg-success');
          toastTitle.innerHTML = '<i class="bi bi-check-circle-fill me-2"></i>' + title;
        }
        
        // Create a Bootstrap toast instance and show it
        const toast = new bootstrap.Toast(toastElement, {
          delay: 5000,
          animation: true,
          autohide: true
        });
        
        toast.show();
      }
      
      // Helper function to update Redis status indicator
      function updateRedisStatus(connected) {
        if (redisStatus) {
          redisStatus.textContent = connected ? 'Connected' : 'Disconnected';
          redisStatus.classList.remove('text-success', 'text-danger', 'loading-placeholder');
          redisStatus.classList.add(connected ? 'text-success' : 'text-danger');
          
          // Also update the cache info container visibility
          if (cacheInfoContainer) {
            cacheInfoContainer.style.display = connected ? 'block' : 'none';
          }
        }
      }
      
      // Modify the fetchCacheStatus function to update match data
      async function fetchCacheStatus() {
        // Set loading state for all elements
        const loadingElements = [
          'redis-status', 'total-cache-count', 'news-cache-count', 
          'leagues-cache-count', 'news-count', 
          'leagues-count', 'users-count', 'cricket-count', 
          'football-count', 'basketball-count', 'volleyball-count', 
          'other-sports-count'
        ];
        
        // Set loading state for match elements
        if (matchesCacheSource) matchesCacheSource.textContent = 'Loading...';
        
        // Reset match status indicators
        if (liveMatchesBar) {
          liveMatchesBar.style.width = '0%';
          liveMatchesBar.textContent = 'Live: 0';
        }
        if (upcomingMatchesBar) {
          upcomingMatchesBar.style.width = '0%';
          upcomingMatchesBar.textContent = 'Upcoming: 0';
        }
        if (completedMatchesBar) {
          completedMatchesBar.style.width = '0%';
          completedMatchesBar.textContent = 'Completed: 0';
        }
        
        try {
          console.log('Fetching cache status...');
          const response = await fetch('/api/admin/cache/status');
          
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          
          const data = await response.json();
          console.log('Received cache status:', data);
          
          if (data.success) {
            // Update Redis status
            updateRedisStatus(data.data.redis.connected);
            
            // Update existing cache counts
            if (totalCacheCount) totalCacheCount.textContent = data.data.redis.cacheInfo ? data.data.redis.cacheInfo.totalKeysCount : 0;
            if (newsCacheCount) newsCacheCount.textContent = data.data.redis.cacheInfo ? data.data.redis.cacheInfo.newsKeysCount : 0;
            if (leaguesCacheCount) leaguesCacheCount.textContent = data.data.redis.cacheInfo ? data.data.redis.cacheInfo.leagueKeysCount : 0;
            if (usersCacheCount && data.data.redis.cacheInfo) usersCacheCount.textContent = data.data.redis.cacheInfo.userKeysCount || 0;
            
            // Update database counts
            if (newsCount) newsCount.textContent = data.data.database.newsCount || 0;
            if (leaguesCount) leaguesCount.textContent = data.data.database.leaguesCount || 0;
            if (usersCount) usersCount.textContent = data.data.database.usersCount || 0;
            
            // Update match cache stats if the elements exist
            if (data.data.redis.cacheInfo) {
              // Update cache keys count
              if (newsKeysCount) newsKeysCount.textContent = data.data.redis.cacheInfo.newsKeysCount || 0;
              if (leagueKeysCount) leagueKeysCount.textContent = data.data.redis.cacheInfo.leagueKeysCount || 0;
              if (userKeysCount) userKeysCount.textContent = data.data.redis.cacheInfo.userKeysCount || 0;
              if (matchKeysCount) matchKeysCount.textContent = data.data.redis.cacheInfo.matchKeysCount || 0;
              if (totalKeysCount) totalKeysCount.textContent = data.data.redis.cacheInfo.totalKeysCount || 0;
            }
            
            // Update match status bars
            if (liveMatchesBar && upcomingMatchesBar && completedMatchesBar) {
              const matchesByStatus = data.data.database.matchesByStatus || {};
              const totalMatches = data.data.database.matchesCount || 0;
              
              // Calculate percentages for the progress bars
              const livePercent = totalMatches > 0 ? (matchesByStatus.live / totalMatches) * 100 : 0;
              const upcomingPercent = totalMatches > 0 ? (matchesByStatus.upcoming / totalMatches) * 100 : 0;
              const completedPercent = totalMatches > 0 ? (matchesByStatus.completed / totalMatches) * 100 : 0;
              
              // Update the status bars
              liveMatchesBar.style.width = `${livePercent}%`;
              liveMatchesBar.textContent = `Live: ${matchesByStatus.live || 0}`;
              liveMatchesBar.setAttribute('aria-valuenow', matchesByStatus.live || 0);
              
              upcomingMatchesBar.style.width = `${upcomingPercent}%`;
              upcomingMatchesBar.textContent = `Upcoming: ${matchesByStatus.upcoming || 0}`;
              upcomingMatchesBar.setAttribute('aria-valuenow', matchesByStatus.upcoming || 0);
              
              completedMatchesBar.style.width = `${completedPercent}%`;
              completedMatchesBar.textContent = `Completed: ${matchesByStatus.completed || 0}`;
              completedMatchesBar.setAttribute('aria-valuenow', matchesByStatus.completed || 0);
            }
            
            // Update matches by category
            if (cricketMatchesCount && footballMatchesCount && basketballMatchesCount && 
                volleyballMatchesCount && othersportsMatchesCount) {
              const matchesByCategory = data.data.database.matchesByCategory || {};
              cricketMatchesCount.textContent = matchesByCategory.cricket || 0;
              footballMatchesCount.textContent = matchesByCategory.football || 0;
              basketballMatchesCount.textContent = matchesByCategory.basketball || 0;
              volleyballMatchesCount.textContent = matchesByCategory.volleyball || 0;
              othersportsMatchesCount.textContent = matchesByCategory.othersports || 0;
            }
            
            // Update cache source indicator
            if (matchesCacheSource && data.data.database && data.data.database.matchesCount > 0) {
              const fromCache = data.data.redis.enabled && data.data.redis.connected && 
                                data.data.redis.cacheInfo && data.data.redis.cacheInfo.matchKeysCount > 0;
              matchesCacheSource.textContent = fromCache ? 'From Cache' : 'From Database';
              matchesCacheSource.className = `badge ${fromCache ? 'bg-success' : 'bg-warning'}`;
            } else if (matchesCacheSource) {
              matchesCacheSource.textContent = 'No Matches';
              matchesCacheSource.className = 'badge bg-secondary';
            }
          } else {
            console.error('Error fetching cache status:', data.message);
            showToast('Error', 'Failed to fetch system status: ' + data.message, true);
          }
        } catch (error) {
          console.error('Error fetching cache status:', error);
          showToast('Error', 'Failed to fetch system status: ' + (error.message || 'Unknown error'), true);
          
          // Update indicators to show error state
          if (redisStatus) {
            redisStatus.textContent = 'Error';
            redisStatus.classList.remove('loading-placeholder');
            redisStatus.classList.add('text-danger');
          }
          
          if (matchesCacheSource) {
            matchesCacheSource.textContent = 'Error';
            matchesCacheSource.className = 'badge bg-danger';
          }
        }
      }
      
      // Handle clear cache requests
      async function clearCache(endpoint, successMessage) {
        try {
          const response = await fetch(`/api/admin/cache/clear/${endpoint}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            }
          });
          
          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || `Failed to clear ${endpoint} cache`);
          }
          
          const data = await response.json();
          
          if (data.success) {
            showToast('Success', successMessage || data.message);
            fetchCacheStatus(); // Refresh status
          } else {
            throw new Error(data.message);
          }
        } catch (error) {
          console.error(`Error clearing ${endpoint} cache:`, error);
          showToast('Error', error.message, true);
        }
      }
      
      // Handle clear database requests
      async function clearDatabase(target, successMessage) {
        try {
          const response = await fetch('/api/admin/cache/clear-db', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ target })
          });
          
          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || `Failed to clear ${target} data`);
          }
          
          const data = await response.json();
          
          if (data.success) {
            showToast('Success', successMessage || data.message);
            fetchCacheStatus(); // Refresh status
          } else {
            throw new Error(data.message);
          }
        } catch (error) {
          console.error(`Error clearing ${target} data:`, error);
          showToast('Error', error.message, true);
        }
      }
      
      // Event listeners
      document.getElementById('refresh-cache-status').addEventListener('click', fetchCacheStatus);
      
      clearNewsCacheBtn.addEventListener('click', () => {
        clearCache('news', 'News cache cleared successfully');
      });
      
      clearLeaguesCacheBtn.addEventListener('click', () => {
        clearCache('leagues', 'Leagues cache cleared successfully');
      });
      
      clearUsersCacheBtn.addEventListener('click', () => {
        clearCache('users', 'Users cache cleared successfully');
      });
      
      clearAllCacheBtn.addEventListener('click', () => {
        clearCache('all', 'All cache cleared successfully');
      });
      
      clearNewsDbBtn.addEventListener('click', () => {
        if (confirm('Are you sure you want to delete all news articles? This cannot be undone.')) {
          clearDatabase('news', 'All news deleted successfully');
        }
      });
      
      clearLeaguesDbBtn.addEventListener('click', () => {
        if (confirm('Are you sure you want to delete all leagues? This cannot be undone.')) {
          clearDatabase('leagues', 'All leagues deleted successfully');
        }
      });
      
      // Enable/disable confirm delete button based on checkbox
      confirmDeleteCheck.addEventListener('change', function() {
        confirmDeleteBtn.disabled = !this.checked;
      });
      
      // Handle confirm delete button
      confirmDeleteBtn.addEventListener('click', function() {
        if (confirmDeleteCheck.checked) {
          clearDatabase('all', 'All data deleted successfully');
          const modal = bootstrap.Modal.getInstance(document.getElementById('confirmDeleteModal'));
          if (modal) modal.hide();
          confirmDeleteCheck.checked = false;
          confirmDeleteBtn.disabled = true;
        }
      });
      
      // Handle fetch news request
      async function fetchNewsData() {
        try {
          // Show progress
          fetchNewsBtn.disabled = true;
          fetchNewsProgress.classList.remove('d-none');
          fetchNewsSuccess.classList.add('d-none');
          
          const response = await fetch('/api/admin/cache/refresh/news', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            }
          });
          
          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || 'Failed to refresh news cache');
          }
          
          const data = await response.json();
          
          if (data.success) {
            fetchNewsSuccess.classList.remove('d-none');
            fetchNewsResult.textContent = `Cache refreshed. Total: ${data.data.totalArticles} articles`;
            showToast('Success', data.message);
            fetchCacheStatus(); // Refresh status
          } else {
            throw new Error(data.message);
          }
        } catch (error) {
          console.error('Error refreshing news cache:', error);
          showToast('Error', error.message, true);
        } finally {
          fetchNewsBtn.disabled = false;
          fetchNewsProgress.classList.add('d-none');
        }
      }
      
      // Add event listener for fetch news button
      if (fetchNewsBtn) {
        fetchNewsBtn.addEventListener('click', fetchNewsData);
      }
      
      // Update leagues list based on selected category
      function updateLeaguesList(category) {
        leaguesList.innerHTML = '';
        
        if (!leaguesData[category] || leaguesData[category].length === 0) {
          leaguesList.innerHTML = `
            <a href="#" class="list-group-item list-group-item-action disabled">
              No leagues found in ${category}
            </a>
          `;
          return;
        }
        
        // Add leagues to the list
        leaguesData[category].forEach((league, index) => {
          const listItem = document.createElement('a');
          listItem.href = '#';
          listItem.className = 'list-group-item list-group-item-action d-flex justify-content-between align-items-center';
          if (index === 0) listItem.classList.add('active');
          
          // Add badge for teams count
          listItem.innerHTML = `
            ${league.name}
            <span class="badge bg-primary rounded-pill">${league.teamsCount} teams</span>
          `;
          
          listItem.addEventListener('click', (e) => {
            e.preventDefault();
            
            // Remove active class from all items
            document.querySelectorAll('#leagues-list a').forEach(item => {
              item.classList.remove('active');
            });
            
            // Add active class to clicked item
            listItem.classList.add('active');
            
            // Update standings table
            updateStandingsTable(league);
          });
          
          leaguesList.appendChild(listItem);
        });
        
        // Update standings table with the first league
        if (leaguesData[category] && leaguesData[category].length > 0) {
          updateStandingsTable(leaguesData[category][0]);
        }
      }
      
      // Update standings table with league data
      function updateStandingsTable(league) {
        standingsTableBody.innerHTML = '';
        
        if (!league.hasStandings) {
          standingsTableBody.innerHTML = `
            <tr>
              <td colspan="7" class="text-center">No standings data available for ${league.name}</td>
            </tr>
          `;
          return;
        }
        
        // Sort standings by points (highest first)
        const sortedStandings = [...league.standings].sort((a, b) => b.points - a.points);
        
        // Add standings to the table
        sortedStandings.forEach((team, index) => {
          const row = document.createElement('tr');
          row.innerHTML = `
            <td>${index + 1}</td>
            <td>${team.team}</td>
            <td>${team.played || 0}</td>
            <td>${team.won || 0}</td>
            <td>${team.drawn || 0}</td>
            <td>${team.lost || 0}</td>
            <td><strong>${team.points || 0}</strong></td>
          `;
          standingsTableBody.appendChild(row);
        });
      }
      
      // Handle league category change
      if (leagueCategorySelect) {
        leagueCategorySelect.addEventListener('change', function() {
          updateLeaguesList(this.value);
        });
      }
      
      // Handle refresh league standings button
      if (refreshLeagueStandingsBtn) {
        refreshLeagueStandingsBtn.addEventListener('click', async function() {
          this.disabled = true;
          this.innerHTML = '<i class="bi bi-arrow-repeat"></i> Refreshing...';
          
          try {
            // Call the API to refresh league standings from database
            const response = await fetch('/api/admin/cache/refresh/leagues', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              }
            });
            
            if (!response.ok) {
              const errorData = await response.json();
              throw new Error(errorData.message || 'Failed to refresh league standings');
            }
            
            const data = await response.json();
            
            if (data.success) {
              showToast('Success', `League standings refreshed. Total: ${data.data.totalLeagues} leagues (${data.data.leaguesWithTeams} with teams)`);
              
              // Update the UI with fresh data
              await fetchCacheStatus();
            } else {
              throw new Error(data.message);
            }
            
            // Reset button
            this.innerHTML = '<i class="bi bi-arrow-repeat"></i> Refresh Standings';
            this.disabled = false;
          } catch (error) {
            console.error('Error refreshing league standings:', error);
            showToast('Error', error.message, true);
            
            // Reset button
            this.innerHTML = '<i class="bi bi-arrow-repeat"></i> Refresh Standings';
            this.disabled = false;
          }
        });
      }
      
      // Event listeners for match cache
      if (refreshMatchesBtn) {
        refreshMatchesBtn.addEventListener('click', async function() {
          try {
            refreshMatchesBtn.disabled = true;
            refreshMatchesProgress.classList.remove('d-none');
            refreshMatchesSuccess.classList.add('d-none');
            
            const response = await fetch('/api/admin/cache/refresh/matches', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              }
            });
            
            if (!response.ok) {
              const errorData = await response.json();
              throw new Error(errorData.message || 'Failed to refresh matches cache');
            }
            
            const data = await response.json();
            
            if (data.success) {
              refreshMatchesProgress.classList.add('d-none');
              refreshMatchesResult.textContent = data.message;
              refreshMatchesSuccess.classList.remove('d-none');
              showToast('Success', data.message);
              fetchCacheStatus(); // Refresh the status
            } else {
              throw new Error(data.message);
            }
          } catch (error) {
            console.error('Error refreshing matches cache:', error);
            showToast('Error', error.message, true);
          } finally {
            refreshMatchesBtn.disabled = false;
            refreshMatchesProgress.classList.add('d-none');
          }
        });
      }
      
      // Initial fetch
      fetchCacheStatus();
    });
  </script>
</body>
</html> 